from create_database import *
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import random
import re
import sqlite3
import datetime
from getpass import getpass
from admin3 import *
import datetime

#git clone https://github.com/PranabNandy/Detection-of-Malicious-URLs.git
# Install dependencies
#pip install nltk sklearn pandas matplotlib seaborn sqlite
#data_dir = "Detection-of-Malicious-URLs/Malicious URLs.csv"

# Import Scikit-learn helper functions
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer

# Import Scikit-learn models
from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import MultinomialNB

# Import Scikit-learn metric functions
from sklearn.metrics import confusion_matrix, classification_report
import seaborn as sns



print("\n### Libraries Imported ###\n")

# Load the training data
print("- Loading CSV Data -")

#change the path of Dataset according to your system
url_df = pd.read_csv(r'C:\Users\PRANAB\Downloads\URL2.csv')
create_db()
today1=datetime.date.today()
db=sqlite3.connect("RABC.db")
c=db.cursor()

# Define report generator
def generate_report(cmatrix, score, creport):
  """Generates and displays graphical reports
  Keyword arguments:
    cmatrix - Confusion matrix generated by the model
    score --- Score generated by the model
    creport - Classification Report generated by the model
    
  :Returns -- N/A
  """
  
  # Transform cmatrix because Sklearn has pred as columns and actual as rows.
  cmatrix = cmatrix.T
  
  # Generate confusion matrix heatmap
  plt.figure(figsize=(5,5))
  sns.heatmap(cmatrix, 
              annot=True, 
              fmt="d", 
              linewidths=.5, 
              square = True, 
              cmap = 'ocean', 
              annot_kws={"size": 16}, 
              xticklabels=['bad', 'good'],
              yticklabels=['bad', 'good'])

  plt.xticks(rotation='horizontal', fontsize=16)
  plt.yticks(rotation='horizontal', fontsize=16)
  plt.xlabel('Actual Label', size=20);
  plt.ylabel('Predicted Label', size=20);

  title = 'Accuracy Score: {0:.4f}'.format(score)
  plt.title(title, size = 20);

  # Display classification report and confusion matrix
  print(creport)
  plt.show()




#train function
def train(id5):
  print("Enter the Percentage of Test data to train the model again (0.X format )")
  perc=float(input())
  print("Enter the Hypermeter Alpha to train the model again (like 0.X format )")
  alp=float(input())
  db=sqlite3.connect("RABC.db")
  c=db.cursor()
  list1=["Successfully Train the URL",str(today1),id5]
  c.execute("Update URA set log=?,date1=? where id=?",list1)
  db.commit()
  detecctionWithRBAC(perc,alp)
  return 0
def foo(result,mnb_count,mnb_tfidf,lgs_count,lgs_tfidf,cVec,tVec):
  id2=result[0][0]
  list1=[(id2)]
  c.execute("Select * from URA where id=?",list1)
  result=c.fetchall()
  print("=" * 90)
  print("                                     Welcome {}".format(result[0][0]))
  print("Last executed operation :{}                         last seeen : {} ".format(result[0][5],result[0][4]))
  print("=" * 90)
  role=result[0][6]
  list1=[(role)]
  #print(role)
  c.execute("Select * from Role where id=?",list1)
  result11=c.fetchall()
  name=result11[0][1]
  s=str(name)
  #print(s)
  
  list2=[(s)]
  c.execute("Select * from PRA where name=?",list2)
  result22=c.fetchall()
  l=len(result22)
  #print("length",l)
  yup=1
  while(yup==1):
    print("-" * 90)
    for i in range(0,l):
      idd=result22[i][1]
      #print("iddd:",idd)
      list3=[(idd)]
      c.execute("Select * from PERM where id=?",list3)
      result33=c.fetchall()
      print("Enter {} == {} ".format(result33[0][0],result33[0][1]))
    print("-" * 90)
    print("Enter your choice : ")
    id2=result[0][0]
    ch=int(input())
    if(ch==1):
      flag=0
      for i in range(0,l):
        idd=result22[i][1]
        if(ch==idd):
          flag=1
      if(flag==0):
        print("You don't have this Access Permission")
      else:
        add(id2)
    elif(ch==2):
      flag=0
      for i in range(0,l):
        idd=result22[i][1]
        if(ch==idd):
          flag=1
      if(flag==0):
        print("You don't have this Access Permission")
      else:
        update(id2)
    
    elif(ch==3):
      flag=0
      for i in range(0,l):
        idd=result22[i][1]
        if(ch==idd):
          flag=1
      if(flag==0):
        print("You don't have this Access Permission")
      else:
        delete(id2)
    
    elif(ch==4):
      flag=0
      for i in range(0,l):
        idd=result22[i][1]
        if(ch==idd):
          flag=1
      if(flag==0):
        print("You don't have this Access Permission")
      else:
        changeRole(id2)

    elif(ch==5):
      flag=0
      for i in range(0,l):
        idd=result22[i][1]
        if(ch==idd):
          flag=1
      if(flag==0):
        print("You don't have this Access Permission")
      else:
        addRole(id2)
    
    elif(ch==6):
      flag=0
      for i in range(0,l):
        idd=result22[i][1]
        if(ch==idd):
          flag=1
      if(flag==0):
        print("You don't have this Access Permission")
      else:
        delRole(id2)
    
    elif(ch==7):
      flag=0
      for i in range(0,l):
        idd=result22[i][1]
        if(ch==idd):
          flag=1
      if(flag==0):
        print("You don't have this Access Permission")
      else:
        train(id2)
        return 0
    
    elif(ch==8):
      flag=0
      for i in range(0,l):
        idd=result22[i][1]
        if(ch==idd):
          flag=1
      if(flag==0):
        print("You don't have this Access Permission")
      else:
        #testing2(id2)
        test(id2,mnb_count,mnb_tfidf,lgs_count,lgs_tfidf,cVec,tVec)
    
    elif(ch==9):
      flag=0
      for i in range(0,l):
        idd=result22[i][1]
        if(ch==idd):
          flag=1
      if(flag==0):
        print("You don't have this Access Permission")
      else:
        show(id2)
    
    else:
      print("EXIT")
      return 0
  
  
    
def detecctionWithRBAC(alpha2,perc):
  test_percentage = perc
  train_df, test_df = train_test_split(url_df, test_size=test_percentage, random_state=42)

  labels = train_df['Class']
  test_labels = test_df['Class']
  # Print counts of each class
  print("- Counting Splits -")
  print("Training Samples:", len(train_df))
  print("Testing Samples:", len(test_df))

  print("- Training Count Vectorizer -")
  cVec = CountVectorizer(tokenizer=tokenizer)
  count_X = cVec.fit_transform(train_df['URLs'])

  print("- Training TF-IDF Vectorizer -")
  tVec = TfidfVectorizer(tokenizer=tokenizer)
  tfidf_X = tVec.fit_transform(train_df['URLs'])
  # Vectorize the testing inputs
  #   Use 'transform' instead of 'fit_transform' because we've already trained our vectorizers
  print("- Count Vectorizer for Test Data -")
  test_count_X=cVec.transform(test_df['URLs'])

  print("- TFIDF Vectorizer for Test Daa -")
  test_tfidf_X=tVec.transform(test_df['URLs'])


  # Multinomial Naive Bayesian with Count Vectorizer
  # Train the model
  mnb_count=MultinomialNB(alpha=alpha2)
  mnb_count.fit(count_X,labels)
  # Test the mode (score, predictions, confusion matrix, classification report)
  score_mnb_count=mnb_count.score(test_count_X,test_labels)
  predictions_mnb_count=mnb_count.predict(test_count_X)
  cmatrix_mnb_count=confusion_matrix(test_labels,predictions_mnb_count)
  creport_mnb_count=classification_report(test_labels,predictions_mnb_count)


  print("\n### Multinomial Naive Bayesian with Count Vectorizer ###\n")
  generate_report(cmatrix_mnb_count, score_mnb_count, creport_mnb_count)

  # Multinomial Naive Bayesian with TF-IDF

  # Train the model
  mnb_tfidf = MultinomialNB(alpha=0.1)
  mnb_tfidf.fit(tfidf_X, labels)


  # Test the mode (score, predictions, confusion matrix, classification report)
  score_mnb_tfidf = mnb_tfidf.score(test_tfidf_X, test_labels)
  predictions_mnb_tfidf = mnb_tfidf.predict(test_tfidf_X)
  cmatrix_mnb_tfidf = confusion_matrix(test_labels, predictions_mnb_tfidf)
  creport_mnb_tfidf = classification_report(test_labels, predictions_mnb_tfidf)

  print("\n### Multinomial Naive Bayesian with TF-IDF ###\n")
  generate_report(cmatrix_mnb_tfidf, score_mnb_tfidf, creport_mnb_tfidf)

  # Logistic Regression with Count Vectorizer

  # Train the model
  lgs_count=LogisticRegression(solver='lbfgs')
  lgs_count.fit(count_X,labels)

  # Test the mode (score, predictions, confusion matrix, classification report)

  score_lgs_count=lgs_count.score(test_count_X,test_labels)
  predictions_lgs_count=lgs_count.predict(test_count_X)
  cmatrix_lgs_count=confusion_matrix(test_labels,predictions_lgs_count)
  creport_lgs_count=classification_report(test_labels,predictions_lgs_count)

  print("\n### Logistic Regression with Count Vectorizer ###\n")
  generate_report(cmatrix_lgs_count, score_lgs_count, creport_lgs_count)

  # Logistic Regression with TF-IDF

  # Train the model
  lgs_tfidf = LogisticRegression(solver='lbfgs')
  lgs_tfidf.fit(tfidf_X, labels)


  # Test the mode (score, predictions, confusion matrix, classification report)
  score_lgs_tfidf = lgs_tfidf.score(test_tfidf_X, test_labels)
  predictions_lgs_tfidf = lgs_tfidf.predict(test_tfidf_X)
  cmatrix_lgs_tfidf = confusion_matrix(test_labels, predictions_lgs_tfidf)
  creport_lgs_tfidf = classification_report(test_labels, predictions_lgs_tfidf)

  print("\n### Logistic Regression with TF-IDF ###\n")
  generate_report(cmatrix_lgs_tfidf, score_lgs_tfidf, creport_lgs_tfidf)

  print("=" * 90)
  print("             Now The Application is ready to Deploy ")
  print("=" * 90)
  
  flag=1
  while(flag==1):
    print("Enter User ID : ")
    id2=input()
    print("Enter Password : (*********) ")
    password2 = getpass()
    #password2=input()
    db=sqlite3.connect("RABC.db")
    c=db.cursor()
    list3=[id2,password2]
    c.execute("Select * from URA Where id=? and pass=?",list3)
    result=c.fetchall()
    #print(len(result))
    
    
    if(len(result)!=0):
        foo(result,mnb_count,mnb_tfidf,lgs_count,lgs_tfidf,cVec,tVec)
        flag=0
        '''if(result[0][6]==1):
          db.commit()
          admin(result[0][0],0,0,0,0,0,0)
          #admin(result[0][0],mnb_count,mnb_tfidf,lgs_count,lgs_tfidf,cVec,tVec)
          flag=0
        elif(result[0][6]==2):
          #member(result[0][0],mnb_count,mnb_tfidf,lgs_count,lgs_tfidf,cVec,tVec)
          db.commit()
          flag=0
        else:
          #user(result[0][0],mnb_count,mnb_tfidf,lgs_count,lgs_tfidf,cVec,tVec)
          db.commit()
          flag=0'''
        
    else:
      db.commit()
      print("Please enter correct user id and password")

  return 0


# Executing the main function of the Program
detecctionWithRBAC(0.2,0.3)

